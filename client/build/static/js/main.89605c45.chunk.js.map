{"version":3,"sources":["utils/auth.js","graphql/queries.js","contexts/CryptoContext.js","contexts/UserContext.js","components/ListItems.js","components/Graph.js","utils/timeHelpers.js","components/Title.js","components/InfoTab.js","graphql/mutations.js","components/Transaction.js","components/CryptoGrid.js","components/PortfolioTabs.js","pages/Portfolio.js","pages/Dashboard.js","pages/Error.js","pages/Signup.js","pages/Login.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","GET_ME","gql","GET_PORTFOLIO","GET_CRYPTOINFO","GET_CRYPTOCANDLES","GET_CRYPTODETAILS","CryptoContext","createContext","useCryptoContext","useContext","CryptoProvider","children","useState","currentticker","setCurrentTicker","Provider","value","handletickerchange","ticker","UserContext","useUserContext","UserProvider","currentuser","setcurrentuser","handleuserchange","username","mainListItems","Link","href","className","ListItem","button","ListItemIcon","ListItemText","primary","secondaryListItems","ListSubheader","inset","onClick","Graph","useQuery","variables","pair","loading","data","titleLabel","toUpperCase","info","console","log","cryptoCandles","cryptoInfo","last_week","xLabels","graphDataPoints","intervalLabels","timeStart","moment","i","length","unixT","timePoint","format","push","reverse","sixHourTimeInterval","datasetIdKey","labels","datasets","fill","borderColor","tension","pointStyle","options","radius","responsive","aspectRatio","plugins","title","display","text","legend","scales","x","y","font","size","ticks","interaction","intersect","backgroundColor","Title","props","Typography","component","variant","color","gutterBottom","InfoTab","gridType","curUSDbalance","name","getPortfolio_loading","getPortfolio_data","getPortfolio","usdBalance","cryptoDetails_loading","cryptoDetails_data","cryptoDetails","url","Fragment","dailyChange","weeklyChange","yearlyChange","yearly_high","yearly_low","sx","flex","toDateString","target","LOGIN_USER","ADD_USER","BUY_CRYPTO","Transaction","open","handleOpen","action","price","React","transactionType","setTransactionType","amount","setAmount","ptf","setPtf","curCryptos","__typename","quantity","cryptos","useMutation","buyCrypto","total","handleClose","handleBuy","event","a","preventDefault","alert","investment","mutationResponse","reload","handleSell","sum","forEach","element","toString","Dialog","onClose","DialogTitle","DialogContent","Box","noValidate","flexDirection","m","width","DialogContentText","Select","autoFocus","onChange","label","fullWidth","inputProps","id","MenuItem","TextField","margin","type","required","defaultValue","DialogActions","Button","CryptoGrid","columns","minWidth","align","page","setPage","rowsPerPage","setRowsPerPage","setOpen","Number","MIN_VALUE","setPrice","getCryptoInfo_loading","getCryptoInfo_data","map","Map","getButton","createData","btn","has","set","get","rows","temp","cryptoData","slice","toFixed","bool","Stack","spacing","Autocomplete","freeSolo","option","renderInput","params","onKeyDown","e","key","toLowerCase","Paper","overflow","TableContainer","maxHeight","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","row","index","hover","role","tabIndex","stopPropagation","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","mt","TabPanel","other","hidden","aria-labelledby","p","a11yProps","PortfolioTabs","handleGridType","theme","useTheme","setValue","bgcolor","AppBar","position","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","Copyright","getFullYear","styled","MuiAppBar","shouldForwardProp","prop","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","breakpoints","up","mdTheme","createTheme","PortfolioContent","setGridType","toggleDrawer","un","getme_loading","getme_data","me","useEffect","ThemeProvider","CssBaseline","Toolbar","pr","IconButton","edge","marginRight","noWrap","flexGrow","Auth","logout","Badge","alignItems","justifyContent","px","Divider","List","palette","mode","grey","height","Container","maxWidth","mb","Grid","container","item","xs","md","lg","pt","Portfolio","DashboardContent","Dashboard","Error","src","alt","border","SignUp","firstName","lastName","password","formState","setFormState","addUser","error","handleChange","handleSubmit","login","marginTop","Avatar","onSubmit","sm","borderRadius","textAlign","LogIn","message","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","redirect","pathname","to","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89605c45.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ME = gql`\r\n    query me {\r\n        me {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_PORTFOLIO = gql`\r\n    query getPortfolio ($name: String) {\r\n        getPortfolio (name: $name) {\r\n            name\r\n            usdBalance\r\n            cryptos {\r\n                ticker\r\n                quantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CRYPTOINFO = gql`\r\n    query cryptoData {\r\n        cryptoData {\r\n            cryptoInfo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CRYPTOCANDLES = gql`\r\n    query cryptoCandles ($pair: String) {\r\n        cryptoCandles(pair: $pair) {\r\n            cryptoInfo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_CRYPTODETAILS = gql`\r\n    query cryptoDetails ($pair : String) { \r\n        cryptoDetails(pair: $pair) {\r\n            cryptoInfo\r\n        }\r\n    }\r\n`;\r\n","import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst CryptoContext = createContext();\r\n\r\nexport const useCryptoContext = () => useContext(CryptoContext);\r\n\r\nexport const CryptoProvider = ({ children }) => { //'children' is missing in props validation         react/prop-types\r\n  const [currentticker, setCurrentTicker] = useState('btc');\r\n\r\n  const handletickerchange = (ticker) => {\r\n    setCurrentTicker(ticker);\r\n  };\r\n\r\n  return (\r\n    <CryptoContext.Provider value={{ currentticker, handletickerchange }}>\r\n      {children}\r\n    </CryptoContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUserContext = () => useContext(UserContext);\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [currentuser, setcurrentuser] = useState('Loading...');\r\n\r\n  const handleuserchange = (username) => {\r\n    setcurrentuser(username);\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ currentuser, handleuserchange }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\n// import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\r\n// import PeopleIcon from '@mui/icons-material/People';\r\nimport BarChartIcon from '@mui/icons-material/BarChart';\r\nimport AssignmentIcon from '@mui/icons-material/Assignment';\r\n\r\n// import Button from '@mui/material/Button';\r\n// import TextField from '@mui/material/TextField';\r\n// import Dialog from '@mui/material/Dialog';\r\n// import DialogActions from '@mui/material/DialogActions';\r\n// import DialogContent from '@mui/material/DialogContent';\r\n// import DialogContentText from '@mui/material/DialogContentText';\r\n// import DialogTitle from '@mui/material/DialogTitle';\r\nimport Link from '@mui/material/Link';\r\n\r\n// import { useState } from 'react';\r\n// import { useMutation } from '@apollo/client';\r\n// import { ADD_PORTFOLIO } from '../utils/mutations';\r\n\r\n\r\n// NOTE!!: mainListItems is for the Dashboard side link, secondaryListItems is for the Portfolio side link.\r\n\r\nexport const mainListItems = (\r\n    <div>\r\n        {/* dashboard button  */}\r\n        <Link href=\"/\" className=\"sideLinks\">\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <DashboardIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Dashboard\" />\r\n            </ListItem>\r\n        </Link>\r\n        {/* leaderboard button  */}\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <BarChartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Leaderboard\" />\r\n        </ListItem>\r\n    </div>\r\n);\r\n\r\n// map portfolios here\r\nexport function secondaryListItems() {\r\n    // const [open, setOpen] = useState(false)\r\n    // const [formState, setFormState] = useState({ name: '' });\r\n\r\n    // const [addPortfolio, { error, data }] = useMutation(ADD_PORTFOLIO);\r\n\r\n    // const handleChange = (event) => {\r\n    //     const { name, value } = event.target;\r\n\r\n    //     setFormState({\r\n    //         ...formState,\r\n    //         [name]: value\r\n    //     });\r\n    // }\r\n\r\n    const handleClickOpen = () => {\r\n\r\n    };\r\n\r\n    // const handleCancel = () => {\r\n    //     setOpen(false);\r\n    // };\r\n\r\n    // const handleAdd = async (event) => {\r\n    //     event.preventDefault();\r\n    //     console.log(formState);\r\n\r\n    //     try {\r\n    //         const { data } = await addPortfolio({\r\n    //             variables: { ...formState, usdBalance: 1000000 }\r\n    //         })\r\n    //         console.log(data)\r\n    //     } catch (e) {\r\n    //         console.error(e)\r\n    //     }\r\n\r\n    //     setFormState({ name: '' });\r\n    //     setOpen(false);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <ListSubheader inset>Portfolios</ListSubheader>\r\n            {/* portfolio button  */}\r\n            <Link href=\"/portfolio\" className=\"sideLinks\">\r\n                <ListItem button onClick={handleClickOpen}>\r\n                    <ListItemIcon>\r\n                        <AssignmentIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Portfolio\" />\r\n                </ListItem>\r\n            </Link>\r\n\r\n            {/* <Dialog open={open} onClose={handleCancel}>\r\n                <DialogTitle>Add a new Portfolio</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Congrats, you're a millionaire! We fund each of your portfolios with $1,000,000 to start. \r\n                        See how different sets of cryptocurrencies perform with each portfolio.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        label=\"Portfolio name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        value={formState.name}\r\n                        onChange={handleChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCancel}>Cancel</Button>\r\n                    <Button onClick={handleAdd}>Add Portfolio</Button>\r\n                </DialogActions>\r\n            </Dialog> */}\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport '../styles/Graph.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto'; // needs to be here in order for the graph to load. This gives a false error of an unused variable used.\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_CRYPTOCANDLES } from '../graphql/queries';\r\nimport { useCryptoContext } from '../contexts/CryptoContext';\r\n// import { hourTimeInterval, sixHourTimeInterval, dayTimeInterval, weekTimeInterval } from '../utils/timeHelpers';\r\nimport { sixHourTimeInterval } from '../utils/timeHelpers';\r\n\r\n\r\nexport default function Graph() {\r\n    const { currentticker } = useCryptoContext();\r\n\r\n    const { loading, data } = useQuery(GET_CRYPTOCANDLES, {\r\n        variables: { pair: currentticker }\r\n    });\r\n    const titleLabel = `${currentticker.toUpperCase()} (price over the past week)`;\r\n\r\n    // TODO: ADD TOGGLE FOR TIMESCALES\r\n    let info = [];\r\n    if (loading) {\r\n        console.log('loading graph..');\r\n    } else {\r\n        // info = data.cryptoCandles.cryptoInfo.last_day;\r\n        info = data.cryptoCandles.cryptoInfo.last_week;\r\n        // info = data.cryptoCandles.cryptoInfo.last_year;\r\n    }\r\n\r\n    // const xLabels = hourTimeInterval(graphDataPoints));\r\n    const xLabels = sixHourTimeInterval(info);\r\n    // const xLabels = weekTimeInterval(graphDataPoints);\r\n\r\n    return (\r\n        <div className=\"graph-container\">\r\n            <div className=\"graph-card\">\r\n                <Line\r\n                    datasetIdKey=\"id\"\r\n                    data={{\r\n                        labels: xLabels,\r\n                        datasets: [{\r\n                            data: info,\r\n                            fill: false,\r\n                            borderColor: 'rgb(175, 92, 192)',\r\n                            tension: 0.1,\r\n                            pointStyle: false,\r\n                        }],\r\n                    }}\r\n                    options={{\r\n                        radius: 0,\r\n                        responsive: true,\r\n                        aspectRatio: 2,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: titleLabel,\r\n                            },\r\n                            legend: {\r\n                                display: false,\r\n                            },\r\n                        },\r\n                        scales: {\r\n                            x: {\r\n                                display: false,\r\n                            },\r\n                            y: {\r\n                                title: {\r\n                                    display: false,\r\n                                    text: 'Value in USD',\r\n                                    font: {\r\n                                        size: 11,\r\n                                    },\r\n                                },\r\n                                display: true,\r\n                                ticks: {\r\n                                    font: {\r\n                                        size: 10,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                        interaction: { // allows for hover bubble\r\n                            intersect: false,\r\n                            backgroundColor: 'rgba(0, 0, 0, 0.57)',\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// https://react-chartjs-2.netlify.app/docs/working-with-datasets\r\n// https://www.chartjs.org/docs/latest/charts/line.html\r\n","import moment from 'moment';\r\n\r\nexport function hourTimeInterval(graphDataPoints) {\r\n    var intervalLabels = [];\r\n    const timeStart = moment();\r\n    for (var i = 0; i < graphDataPoints.length; i++) {\r\n        const unixT = (timeStart - (i * 3600000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        const timePoint = moment(unixT).format('MMM-DD-YYYY, HH:00');\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n\r\nexport function sixHourTimeInterval(graphDataPoints) {\r\n    var intervalLabels = [];\r\n    const timeStart = moment();\r\n    for (var i = 0; i < graphDataPoints.length; i++) {\r\n        const unixT = (timeStart - (i * 21600000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        const timePoint = moment(unixT).format('MMM-DD-YYYY, HH:00:00');\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n\r\nexport function dayTimeInterval(history) {\r\n    var intervalLabels = [];\r\n    const timeStart = moment();\r\n    for (var i = 0; i < history.length; i++) {\r\n        const unixT = (timeStart - (i * 86400000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        const timePoint = moment(unixT).format('M-D-YYYY');\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n\r\nexport function weekTimeInterval(history) {\r\n    var intervalLabels = [];\r\n    const timeStart = moment();\r\n    for (var i = 0; i < history.length; i++) {\r\n        const unixT = (timeStart - (i * 604800000)); // time is milliseconds, thus, 3 digits are added on the end of each unix integer.\r\n        const timePoint = moment(unixT).format('M-D-YYYY');\r\n        intervalLabels.push(timePoint);\r\n    }\r\n    return intervalLabels.reverse();\r\n}\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nfunction Title(props) {\r\n    return (\r\n        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n            {props.children}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTitle.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useQuery } from '@apollo/client';\r\nimport Title from './Title';\r\nimport { GET_PORTFOLIO, GET_CRYPTODETAILS } from '../graphql/queries';\r\n\r\nimport { useCryptoContext } from '../contexts/CryptoContext';\r\nimport { useUserContext } from '../contexts/UserContext';\r\n\r\n// gridType is either 'my' or 'all'\r\nexport default function InfoTab({ gridType }) {\r\n    // ============================================================================ //\r\n    //  ORDER OF OPERATIONS MUST GO:  GET_ME => GET_PORTFOLIO => GET_CRYPTODETAILS  //\r\n    // ============================================================================ //\r\n    const { currentticker } = useCryptoContext();\r\n    const { currentuser } = useUserContext(); // \"GET_ME\"\r\n\r\n    // ============================================================================ //\r\n    //                         //   GET_PORTFOLIO   //                              //\r\n    // ============================================================================ //\r\n    let curUSDbalance = 'Loading...'; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    const { loading: getPortfolio_loading, data: getPortfolio_data } = useQuery(GET_PORTFOLIO, { variables: { name: currentuser } });\r\n\r\n    if (getPortfolio_loading) {\r\n        console.log('Loading portfolio data in InfoTabs.js...');\r\n    } else {\r\n        if (!getPortfolio_data) {\r\n            console.log(curUSDbalance, 'Falsey \\'curUSDbalance\\' in InfoTabs.js. Should never get here.'); // Delete this (if) once working to increase performance\r\n        } else if (getPortfolio_data?.getPortfolio?.usdBalance) {\r\n            curUSDbalance = getPortfolio_data.getPortfolio.usdBalance;\r\n            console.log(curUSDbalance, 'Truthy \\'curUSDbalance\\' in InfoTabs.js');\r\n        }\r\n    }\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n    // ============================================================================ //\r\n    //                       //   GET_CRYPTODETAILS   //                            //\r\n    // ============================================================================ //\r\n    let info = { 'dailyChange': 'Loading...', 'weeklyChange': 'Loading...', 'yearlyChange': 'Loading...', 'yearly_high': 'Loading...', 'yearly_low': 'Loading...' }; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    const { loading: cryptoDetails_loading, data: cryptoDetails_data } = useQuery(GET_CRYPTODETAILS, { variables: { pair: currentticker } });\r\n\r\n    if (cryptoDetails_loading) {\r\n        console.log('Loading cryptoDetails data in InfoTabs.js...');\r\n    } else {\r\n        if (!cryptoDetails_data) {\r\n            console.log(info, 'Falsey \\'info\\' in InfoTabs.js. Should never get here.'); // Delete this (if) once working to increase performance\r\n        } else if (cryptoDetails_data?.cryptoDetails?.cryptoInfo) {\r\n            info = cryptoDetails_data.cryptoDetails.cryptoInfo;\r\n            console.log(info, 'Truthy \\'cryptoDetails_data\\' in InfoTabs.js');\r\n        }\r\n    }\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n    // URL for cryptowatch link. Not used in queries\r\n    const url = `https://cryptowat.ch/charts/COINBASE-PRO:${currentticker}-USD`;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title>\r\n                {gridType === 'all' ? currentticker.toUpperCase() : 'My Portfolio'}\r\n            </Title>\r\n            {gridType === 'all'\r\n                // Crypto info\r\n                ? <div>\r\n                    <Typography component=\"p\">\r\n                        Daily Change: {info.dailyChange}%\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        Weekly Change: {info.weeklyChange}%\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        Yearly Change: {info.yearlyChange}%\r\n                        {/* TODO change later */}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        52-Wk High: ${info.yearly_high}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        52-Wk Low: ${info.yearly_low}\r\n                    </Typography>\r\n                </div>\r\n\r\n                // Portfolio info\r\n                : <div>\r\n                    <Typography component=\"h4\">\r\n                        Current Purchasing Power:\r\n                        <br />\r\n                        $ {curUSDbalance}\r\n                    </Typography>\r\n                </div>}\r\n            {/* add a chart pie chart here instead of the value */}\r\n            <Typography color=\"text.secondary\" sx={{ flex: 1 }}>\r\n                on {new Date().toDateString()}.\r\n            </Typography>\r\n            <div>\r\n                {/* https://www.coinbase.com/price/bitcoin, format to make href like this */}\r\n                <Link color=\"primary\" href={url} target=\"_blank\">\r\n                    Buy Real Coin\r\n                </Link>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login(username: $username, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $firstName: String!, $lastName: String!, $password: String!) {\r\n        addUser(username: $username, firstName: $firstName, lastName: $lastName, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_PORTFOLIO = gql`\r\n    mutation addPortfolio($name: String, $usdBalance: Float!) {\r\n        addPortfolio(name: $name, usdBalance: $usdBalance) {\r\n            name\r\n            usdBalance\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_BALANCE = gql`\r\n    mutation updateBalance($name: String!) {\r\n        updateBalance(name: $name) {\r\n            historicalBalance\r\n        }\r\n    }\r\n`;\r\n\r\nexport const BUY_CRYPTO = gql`\r\n    mutation buyCrypto($name: String!, $ticker: String!, $quantity: Float!, $investment: String!) {\r\n        buyCrypto(name: $name, ticker: $ticker, quantity: $quantity, investment: $investment) {\r\n            cryptos {\r\n                ticker\r\n                quantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\n\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { useCryptoContext } from '../contexts/CryptoContext';\r\nimport { useUserContext } from '../contexts/UserContext';\r\n\r\nimport { GET_PORTFOLIO } from '../graphql/queries';\r\nimport { BUY_CRYPTO } from '../graphql/mutations';\r\n\r\n\r\n\r\nfunction Transaction({ open, handleOpen, action, price }) {\r\n    const [transactionType, setTransactionType] = React.useState(action);\r\n    const [amount, setAmount] = React.useState(0);\r\n    const [ptf, setPtf] = React.useState('portfolio1');\r\n\r\n    // ============================================================================ //\r\n    //  ORDER OF OPERATIONS MUST GO:  GET_ME => GET_PORTFOLIO => BUY_CRYPTO         //\r\n    // ============================================================================ //\r\n    const { currentticker } = useCryptoContext();\r\n    const { currentuser } = useUserContext(); // \"GET_ME\"\r\n\r\n    // ============================================================================ //\r\n    //                         //   GET_PORTFOLIO   //                              //\r\n    // ============================================================================ //\r\n    let curUSDbalance = 'Loading...'; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    let curCryptos = [{ __typename: 'Crypto', ticker: 'BTC', quantity: 9.99999 }, { __typename: 'Crypto', ticker: 'ETH', quantity: 9.99999 }]; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    const { loading: getPortfolio_loading, data: getPortfolio_data } = useQuery(GET_PORTFOLIO, { variables: { name: currentuser } });\r\n\r\n    if (getPortfolio_loading) {\r\n        console.log('Loading portfolio data in Transaction.js...');\r\n    } else {\r\n        if (!getPortfolio_data) {\r\n            console.log(curUSDbalance, 'Falsey \\'curUSDbalance\\' in Transaction.js. Should never get here.'); // Delete this (if) once working to increase performance\r\n            // } else if (getPortfolio_data?.getPortfolio?.usdBalance && getPortfolio_data?.getPortfolio?.cryptos) {\r\n        } else if (getPortfolio_data) {\r\n            curUSDbalance = getPortfolio_data.getPortfolio.usdBalance;\r\n            curCryptos = getPortfolio_data.getPortfolio.cryptos;\r\n            console.log(curCryptos, 'Truthy \\'curCryptos\\' in Transaction.js');\r\n            console.log(curUSDbalance, 'Truthy \\'curUSDbalance\\' in Transaction.js');\r\n        }\r\n    }\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ //\r\n\r\n\r\n    // ============================================================================ //\r\n    //                            //   BUY_CRYPTO   //                              //\r\n    // ============================================================================ //\r\n    const [buyCrypto] = useMutation(BUY_CRYPTO);\r\n\r\n\r\n    // BUY FUNCTIONS\r\n    let total = amount / price;\r\n    // console.log(price);\r\n    const handleClose = () => {\r\n        handleOpen(false);\r\n    };\r\n\r\n    const handleTransactionType = (event) => {\r\n        setTransactionType(event.target.value);\r\n    };\r\n\r\n    const handleAmountChange = (event) => {\r\n        setAmount(event.target.value);\r\n        total = amount / price;\r\n    };\r\n\r\n    const handlePtfChange = (event) => {\r\n        setPtf(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        if (transactionType === 'buy') {\r\n            handleBuy(event);\r\n        } else {\r\n            handleSell(event);\r\n        }\r\n    };\r\n\r\n    const handleBuy = async (event) => {\r\n        event.preventDefault();\r\n        console.log('buy');\r\n        if (amount > curUSDbalance) {\r\n            alert(\"You don't have enough money!\");\r\n            return;\r\n        }\r\n\r\n        console.log(curCryptos);\r\n\r\n        const mutationResponse = await buyCrypto({\r\n            variables: {\r\n                name: currentuser,\r\n                ticker: currentticker,\r\n                quantity: total,\r\n                investment: amount,\r\n            },\r\n        });\r\n        console.log('purchase successful');\r\n        // maybe give user feedback\r\n        handleClose();\r\n        window.location.reload();\r\n\r\n        return mutationResponse;\r\n    };\r\n\r\n    const handleSell = async (event) => {\r\n        event.preventDefault();\r\n        console.log('sell');\r\n\r\n        // check to see if the sell is valid, traverse through map to see if i have it\r\n        let sum = 0;\r\n        curCryptos.forEach((element) => {\r\n            if (element.ticker === currentticker) {\r\n                sum += element.quantity;\r\n            }\r\n        });\r\n        if (sum >= total) {\r\n            const mutationResponse = await buyCrypto({\r\n                variables: {\r\n                    name: currentuser,\r\n                    ticker: currentticker,\r\n                    quantity: (total * -1),\r\n                    investment: (amount * -1).toString(),\r\n                },\r\n            });\r\n            // add feedback of sell successful\r\n            console.log('sell successful');\r\n            // maybe give user feedback\r\n            handleClose();\r\n            window.location.reload();\r\n            return mutationResponse;\r\n        } else {\r\n            alert(`You don't have enough ${currentticker}!`);\r\n            return;\r\n        }\r\n    };\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Trade {currentticker}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box\r\n                        noValidate\r\n                        component=\"form\"\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            m: 'auto',\r\n                            width: 'fit-content',\r\n                        }}\r\n                    >\r\n                        <DialogContentText>\r\n                            Portfolio\r\n                        </DialogContentText>\r\n                        {/* select which portfolio to buy or choose from */}\r\n                        <Select\r\n                            autoFocus\r\n                            value={ptf}\r\n                            onChange={handlePtfChange}\r\n                            label=\"Portfolio\"\r\n                            fullWidth\r\n                            inputProps={{\r\n                                name: 'ptf',\r\n                                id: 'ptf',\r\n                            }}\r\n                        >\r\n                            <MenuItem value=\"Portfolio 1\">portfolio 1</MenuItem>\r\n                            {/* list other ones here */}\r\n                        </Select>\r\n                        <DialogContentText>\r\n                            Transaction Type\r\n                        </DialogContentText>\r\n                        <Select\r\n                            value={transactionType}\r\n                            onChange={handleTransactionType}\r\n                            label=\"Transaction Type\"\r\n                            fullWidth\r\n                            inputProps={{\r\n                                name: 'transactionType',\r\n                                id: 'transactionType',\r\n                            }}\r\n                        >\r\n                            <MenuItem value=\"buy\">Buy</MenuItem>\r\n                            <MenuItem value=\"sell\">Sell</MenuItem>\r\n                        </Select>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"$\"\r\n                            type=\"number\" //or some number idk, figure out how to replace it when you click on it\r\n                            fullWidth\r\n                            required={true}\r\n                            defaultValue=\"0.00\"\r\n                            variant=\"standard\"\r\n                            onChange={handleAmountChange}\r\n                        />\r\n                        <DialogContentText>\r\n                            {total} {currentticker}\r\n                        </DialogContentText>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleSubmit}>{transactionType === 'buy' ? 'Purchase' : 'Sell'}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Transaction;\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport Link from '@mui/material/Link';\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Title from './Title';\r\n\r\nimport Transaction from './Transaction';\r\nimport { useCryptoContext } from '../contexts/CryptoContext';\r\nimport { useUserContext } from '../contexts/UserContext';\r\n\r\nimport { GET_PORTFOLIO, GET_CRYPTOINFO } from '../graphql/queries';\r\n\r\n\r\n// gridType will either be 'my' or 'all'\r\nexport default function CryptoGrid({ gridType }) { // prop validation??? Default props??\r\n\r\n    // ============================================================================ //\r\n    //                       //   Crypto Table   //                                 //\r\n    // ============================================================================ //\r\n    const columns = gridType === 'all'\r\n        ?\r\n        [{ id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'ticker', label: 'Ticker', minWidth: 100 },\r\n        { id: 'price', label: 'Price\\u00a0(USD)', minWidth: 170 },\r\n        { id: 'buysell', label: 'Buy/Sell', minWidth: 100, align: 'right' }]\r\n        :\r\n        [{ id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'ticker', label: 'Ticker', minWidth: 100 },\r\n        { id: 'price', label: 'Price per Coin\\u00a0(USD)', minWidth: 170 },\r\n        { id: 'quantity', label: 'Quantity', minWidth: 170 },\r\n        { id: 'investment', label: 'Total Value', minWidth: 170 },\r\n        { id: 'buysell', label: 'Buy/Sell', minWidth: 100, align: 'right' }];\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(100);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [price, setPrice] = React.useState(Number.MIN_VALUE);\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n\r\n    // ============================================================================ //\r\n    //  ORDER OF OPERATIONS MUST GO:  GET_ME => GET_PORTFOLIO => GET_CRYPTOINFO  //\r\n    // ============================================================================ //\r\n    const { currentticker, handletickerchange } = useCryptoContext();\r\n    const { currentuser } = useUserContext(); // \"GET_ME\"\r\n\r\n\r\n    // ============================================================================ //\r\n    //                         //   GET_PORTFOLIO   //                              //\r\n    // ============================================================================ //\r\n    let curCryptos = [{ __typename: 'Crypto', ticker: 'BTC', quantity: 9.99999 }]; //, { __typename: 'Crypto', ticker: 'ETH', quantity: 9.99999 }]; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    const { loading: getPortfolio_loading, data: getPortfolio_data } = useQuery(GET_PORTFOLIO, { variables: { name: currentuser } });\r\n\r\n    if (getPortfolio_loading) {\r\n        console.log('Loading portfolio data in CryptoGrid.js...');\r\n    } else {\r\n        if (!getPortfolio_data) {\r\n            console.log(curCryptos, 'Falsey \\'curCryptos\\' in CryptoGrid.js. Should never get here.'); // Delete this (if) once working to increase performance\r\n        } else if (getPortfolio_data?.getPortfolio?.cryptos) {\r\n            curCryptos = getPortfolio_data.getPortfolio.cryptos;\r\n            console.log(curCryptos, 'Truthy \\'curCryptos\\' in CryptoGrid.js');\r\n        }\r\n    }\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n\r\n    // ============================================================================ //\r\n    //                         //   GET_CRYPTOINFO   //                             //\r\n    // ============================================================================ //\r\n\r\n    const { loading: getCryptoInfo_loading, data: getCryptoInfo_data } = useQuery(GET_CRYPTOINFO);\r\n\r\n    let map = new Map();\r\n    curCryptos.forEach((element) => {\r\n        if (map.has(element.ticker)) {\r\n            map.set(element.ticker, map.get(element.ticker) + element.quantity);\r\n        } else {\r\n            map.set(element.ticker, element.quantity);\r\n        }\r\n    });\r\n\r\n    // const cryptoQuantities = [...map.entries()];\r\n\r\n    function getButton(ticker) {\r\n        return (\r\n            <button type=\"button\">Trade</button>\r\n        );\r\n    }\r\n    function createData(name, ticker, price) {\r\n        const btn = getButton(ticker);\r\n        return { name, ticker, price, btn };\r\n    }\r\n\r\n    // default seed getCryptoInfo_data\r\n    var rows = [\r\n        createData('Bitcoin', 'BTC', 44000),\r\n        createData('Ethereum', 'ETH', 4080),\r\n    ];\r\n\r\n    if (getCryptoInfo_loading) {\r\n        // console.log('loading crypto grid...');\r\n    } else {\r\n        const temp = [];\r\n\r\n        if (gridType === 'all') {\r\n            for (let i = 0; i < getCryptoInfo_data.cryptoData.cryptoInfo.length; i++) {\r\n                temp[i] = getCryptoInfo_data.cryptoData.cryptoInfo[i].slice();\r\n            }\r\n            temp.forEach((element) => {\r\n                element.push(getButton(element[1]));\r\n            });\r\n        } else {\r\n            for (let i = 0; i < getCryptoInfo_data.cryptoData.cryptoInfo.length; i++) {\r\n                if (map.has(getCryptoInfo_data.cryptoData.cryptoInfo[i][1])) {\r\n                    temp[i] = getCryptoInfo_data.cryptoData.cryptoInfo[i].slice();\r\n                }\r\n            }\r\n            temp.forEach((element) => {\r\n                // quantity\r\n                element.push(map.get(element[1]));\r\n                // investment\r\n                const total = map.get(element[1]) * element[2];\r\n                element.push(total.toFixed(2));\r\n                element.push(getButton(element[1]));\r\n            });\r\n        }\r\n        rows = temp;\r\n    }\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n    const handleOpen = (bool) => setOpen(bool);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title>{gridType === 'all' ? 'Browse Cryptos' : 'My Cryptos'}</Title>\r\n            <Stack spacing={2} sx={{ width: 300 }}>\r\n                <Autocomplete\r\n                    id=\"search-for-crypto\"\r\n                    freeSolo\r\n                    options={rows.map((option) => option[1])}\r\n                    renderInput={(params) => <TextField\r\n                        {...params}\r\n                        label=\"Search For Crypto\"\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === 'Enter') {\r\n                                const ticker = params.inputProps.value.toLowerCase();\r\n                                handletickerchange(ticker);\r\n                            }\r\n                        }}\r\n                    />}\r\n                />\r\n            </Stack>\r\n            <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n                <TableContainer sx={{ maxHeight: 440 }}>\r\n                    <Table stickyHeader aria-label=\"Crypto Table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {columns.map((column) => (\r\n                                    <TableCell\r\n                                        key={column.id}\r\n                                        align={column.align}\r\n                                        style={{ minWidth: column.minWidth }}\r\n                                    >\r\n                                        {column.label}\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover role=\"checkbox\"\r\n                                            tabIndex={-1}\r\n                                            key={index}\r\n                                            currentticker={currentticker}\r\n                                            handletickerchange={handletickerchange}\r\n                                            onClick={(event) => {\r\n                                                // handleOpen(true);\r\n                                                event.preventDefault();\r\n                                                handletickerchange(row[1]);\r\n                                                // handles what row is being clicked on, saves ticker to render other components, saves to context\r\n                                            }}\r\n                                        >\r\n                                            {columns.map((column, index) => {\r\n                                                const value = row[index];\r\n                                                if (index === 3 && gridType === 'all') {\r\n                                                    return (\r\n                                                        <TableCell\r\n                                                            key={index}\r\n                                                            align={column.align}\r\n                                                            onClick={(event) => {\r\n                                                                event.preventDefault();\r\n                                                                event.stopPropagation();\r\n                                                                handletickerchange(row[1]);\r\n                                                                // console.log(row[1] + \" button clicked\");\r\n                                                                setPrice(row[2]);\r\n                                                                handleOpen(true);\r\n                                                            }}\r\n                                                        >\r\n                                                            {column.format && typeof value === 'number'\r\n                                                                ? column.format(value)\r\n                                                                : value}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                } else if (index === 5 && gridType === 'my') {\r\n                                                    return (\r\n                                                        <TableCell\r\n                                                            key={index}\r\n                                                            align={column.align}\r\n                                                            onClick={(event) => {\r\n                                                                event.preventDefault();\r\n                                                                event.stopPropagation();\r\n                                                                handletickerchange(row[1]);\r\n                                                                // console.log(row[1] + \" button clicked\");\r\n                                                                setPrice(row[2]);\r\n                                                                handleOpen(true);\r\n                                                            }}\r\n                                                        >\r\n                                                            {column.format && typeof value === 'number'\r\n                                                                ? column.format(value)\r\n                                                                : value}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                }\r\n                                                return (\r\n                                                    <TableCell\r\n                                                        key={index}\r\n                                                        align={column.align}\r\n                                                    >\r\n                                                        {column.format && typeof value === 'number'\r\n                                                            ? column.format(value)\r\n                                                            : value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <div>\r\n                {open\r\n                    ? <Transaction open={open} handleOpen={handleOpen} action={'buy'} price={price} />\r\n                    : <div></div>\r\n                }\r\n            </div>\r\n            <Link color=\"primary\" target=\"_blank\" href=\"https://coinmarketcap.com/\" sx={{ mt: 3 }}>\r\n                See more Cryptos\r\n            </Link>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport CryptoGrid from './CryptoGrid.js';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function PortfolioTabs({ gridType, handleGridType }) {\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    if (newValue === 0) {\r\n      handleGridType('my');\r\n    } else {\r\n      handleGridType('all');\r\n    }\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n\r\n  return (\r\n    <Box sx={{ bgcolor: 'background.paper' }}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"inherit\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"My Cryptos\" {...a11yProps(0)} />\r\n          <Tab label=\"Browse Cryptos\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n          <CryptoGrid gridType={gridType} />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n          <CryptoGrid gridType={gridType} />\r\n        </TabPanel>\r\n\r\n      </SwipeableViews>\r\n    </Box>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport '../styles/dashboard.css';\r\n\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Badge from '@mui/material/Badge';\r\nimport Box from '@mui/material/Box';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Link from '@mui/material/Link';\r\nimport List from '@mui/material/List';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Paper from '@mui/material/Paper';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { GET_ME } from '../graphql/queries';\r\nimport { CryptoProvider } from '../contexts/CryptoContext';\r\nimport { useUserContext } from '../contexts/UserContext';\r\n\r\nimport { mainListItems, secondaryListItems } from '../components/ListItems';\r\nimport Graph from '../components/Graph';\r\nimport InfoTab from '../components/InfoTab';\r\nimport PortfolioTabs from '../components/PortfolioTabs';\r\n\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n\r\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}.\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        '& .MuiDrawer-paper': {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            boxSizing: 'border-box',\r\n            ...(!open && {\r\n                overflowX: 'hidden',\r\n                transition: theme.transitions.create('width', {\r\n                    easing: theme.transitions.easing.sharp,\r\n                    duration: theme.transitions.duration.leavingScreen,\r\n                }),\r\n                width: theme.spacing(7),\r\n                [theme.breakpoints.up('sm')]: {\r\n                    width: theme.spacing(9),\r\n                },\r\n            }),\r\n        },\r\n    }),\r\n);\r\n\r\nconst mdTheme = createTheme();\r\n\r\nfunction PortfolioContent() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [gridType, setGridType] = React.useState('my');\r\n    const toggleDrawer = () => {\r\n        setOpen(!open);\r\n    };\r\n    const logout = (event) => {\r\n        event.preventDefault();\r\n        Auth.logout();\r\n    };\r\n    const handleGridType = (type) => {\r\n        console.log(gridType, 'changed to', type);\r\n        setGridType(type);\r\n    };\r\n\r\n\r\n    // ============================================================================ //\r\n    //                             //   GET_ME   //                                 //\r\n    // ============================================================================ //\r\n    const { handleuserchange } = useUserContext();\r\n\r\n    let un = 'Loading...'; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\r\n\r\n    if (getme_loading) {\r\n        console.log('Loading username data in Dashboard.js...');\r\n    } else {\r\n        if (!getme_data) {\r\n            console.log(un, 'Falsey \\'un\\' in Dashboard.js. Should never get here.'); // Delete this (if) once working to increase performance\r\n        } else if (getme_data) {\r\n            un = getme_data.me.username;\r\n            console.log(un, 'Truthy \\'un\\' in Dashboard.js');\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        handleuserchange(un);\r\n    }, [handleuserchange, un]);\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n\r\n    return (\r\n        <CryptoProvider>\r\n            <ThemeProvider theme={mdTheme}>\r\n                <Box sx={{ display: 'flex' }}>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" open={open}>\r\n                        <Toolbar sx={{ pr: '24px' }}>\r\n                            <IconButton\r\n                                edge=\"start\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={toggleDrawer}\r\n                                sx={{\r\n                                    marginRight: '36px',\r\n                                    ...(open && { display: 'none' }),\r\n                                }}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            <Typography\r\n                                component=\"h1\"\r\n                                variant=\"h6\"\r\n                                color=\"inherit\"\r\n                                noWrap\r\n                                sx={{ flexGrow: 1 }}\r\n                            >\r\n                                Portfolio\r\n                            </Typography>\r\n                            <IconButton color=\"inherit\" onClick={logout}>\r\n                                <Badge color=\"secondary\">\r\n                                    <LogoutIcon />\r\n                                </Badge>\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer variant=\"permanent\" open={open}>\r\n                        <Toolbar\r\n                            sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'flex-end',\r\n                                px: [1],\r\n                            }}\r\n                        >\r\n                            <IconButton onClick={toggleDrawer}>\r\n                                <ChevronLeftIcon />\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                        <Divider />\r\n                        <List>\r\n                            {mainListItems}\r\n                        </List>\r\n                        <Divider />\r\n                        <List>\r\n                            {secondaryListItems()}\r\n                        </List>\r\n                    </Drawer>\r\n                    <Box\r\n                        component=\"main\"\r\n                        sx={{\r\n                            backgroundColor: (theme) =>\r\n                                theme.palette.mode === 'light'\r\n                                    ? theme.palette.grey[100]\r\n                                    : theme.palette.grey[900],\r\n                            flexGrow: 1,\r\n                            height: '100vh',\r\n                            overflow: 'auto',\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12} md={8} lg={9}>\r\n                                    <Paper\r\n                                        className=\"graph-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <Graph />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4} lg={3}>\r\n                                    <Paper\r\n                                        className=\"stats-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <InfoTab gridType={gridType} handleGridType={handleGridType} />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <PortfolioTabs gridType={gridType} handleGridType={handleGridType} />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Copyright sx={{ pt: 4 }} />\r\n                        </Container>\r\n                    </Box>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </CryptoProvider>\r\n    );\r\n}\r\n\r\nexport default function Portfolio() {\r\n    return <PortfolioContent />;\r\n}\r\n","import * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport '../styles/dashboard.css';\r\n\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Badge from '@mui/material/Badge';\r\nimport Box from '@mui/material/Box';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Link from '@mui/material/Link';\r\nimport List from '@mui/material/List';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Paper from '@mui/material/Paper';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { GET_ME } from '../graphql/queries';\r\nimport Auth from '../utils/auth';\r\nimport { CryptoProvider } from '../contexts/CryptoContext';\r\nimport { useUserContext } from '../contexts/UserContext';\r\n\r\nimport { mainListItems, secondaryListItems } from '../components/ListItems';\r\nimport CryptoGrid from '../components/CryptoGrid';\r\nimport Graph from '../components/Graph';\r\nimport InfoTab from '../components/InfoTab';\r\n\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n\r\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}.\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        '& .MuiDrawer-paper': {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            boxSizing: 'border-box',\r\n            ...(!open && {\r\n                overflowX: 'hidden',\r\n                transition: theme.transitions.create('width', {\r\n                    easing: theme.transitions.easing.sharp,\r\n                    duration: theme.transitions.duration.leavingScreen,\r\n                }),\r\n                width: theme.spacing(7),\r\n                [theme.breakpoints.up('sm')]: {\r\n                    width: theme.spacing(9),\r\n                },\r\n            }),\r\n        },\r\n    }),\r\n);\r\n\r\nconst mdTheme = createTheme();\r\n\r\nfunction DashboardContent() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [gridType, setGridType] = React.useState('all');\r\n    const toggleDrawer = () => {\r\n        setOpen(!open);\r\n    };\r\n    const logout = (event) => {\r\n        event.preventDefault();\r\n        Auth.logout();\r\n    };\r\n    const handleGridType = (type) => {\r\n        console.log(gridType, 'changed to', type);\r\n        setGridType(type);\r\n    };\r\n\r\n\r\n    // ============================================================================ //\r\n    //                             //   GET_ME   //                                 //\r\n    // ============================================================================ //\r\n    const { handleuserchange } = useUserContext();\r\n\r\n    let un = 'Loading...'; // Init variable for holding. Prevents crashing due to null values if the query is too slow.\r\n    const { loading: getme_loading, data: getme_data } = useQuery(GET_ME);\r\n\r\n    if (getme_loading) {\r\n        console.log('Loading username data in Dashboard.js...');\r\n    } else {\r\n        if (!getme_data) {\r\n            console.log(un, 'Falsey \\'un\\' in Dashboard.js. Should never get here.'); // Delete this (if) once working to increase performance\r\n        } else if (getme_data) {\r\n            un = getme_data.me.username;\r\n            console.log(un, 'Truthy \\'un\\' in Dashboard.js');\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        handleuserchange(un);\r\n    }, [handleuserchange, un]);\r\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ //\r\n\r\n\r\n    return (\r\n        <CryptoProvider>\r\n            <ThemeProvider theme={mdTheme}>\r\n                <Box sx={{ display: 'flex' }}>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" open={open}>\r\n                        <Toolbar sx={{ pr: '24px' }}>\r\n                            <IconButton\r\n                                edge=\"start\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={toggleDrawer}\r\n                                sx={{\r\n                                    marginRight: '36px',\r\n                                    ...(open && { display: 'none' }),\r\n                                }}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            <Typography\r\n                                component=\"h1\"\r\n                                variant=\"h6\"\r\n                                color=\"inherit\"\r\n                                noWrap\r\n                                sx={{ flexGrow: 1 }}\r\n                            >\r\n                                Dashboard\r\n                            </Typography>\r\n                            <IconButton color=\"inherit\" onClick={logout}>\r\n                                <Badge color=\"secondary\">\r\n                                    <LogoutIcon />\r\n                                </Badge>\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer variant=\"permanent\" open={open}>\r\n                        <Toolbar\r\n                            sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'flex-end',\r\n                                px: [1],\r\n                            }}\r\n                        >\r\n                            <IconButton onClick={toggleDrawer}>\r\n                                <ChevronLeftIcon />\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                        <Divider />\r\n                        <List>\r\n                            {mainListItems}\r\n                        </List>\r\n                        <Divider />\r\n                        <List>\r\n                            {secondaryListItems()}\r\n                        </List>\r\n                    </Drawer>\r\n                    <Box\r\n                        component=\"main\"\r\n                        sx={{\r\n                            backgroundColor: (theme) =>\r\n                                theme.palette.mode === 'light'\r\n                                    ? theme.palette.grey[100]\r\n                                    : theme.palette.grey[900],\r\n                            flexGrow: 1,\r\n                            height: '100vh',\r\n                            overflow: 'auto',\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                            <Grid container spacing={3}>\r\n                                {/* Chart */}\r\n                                <Grid item xs={12} md={8} lg={9}>\r\n                                    <Paper\r\n                                        className=\"graph-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <Graph />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4} lg={3}>\r\n                                    <Paper\r\n                                        className=\"stats-paper\"\r\n                                        sx={{\r\n                                            p: 2,\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                        }}\r\n                                    >\r\n                                        <InfoTab gridType={gridType} handleGridType={handleGridType} />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Paper id=\"dashboard-table-container\" sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n                                        <CryptoGrid gridType={gridType} handleGridType={handleGridType} />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Copyright sx={{ pt: 4 }} />\r\n                        </Container>\r\n                    </Box>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </CryptoProvider>\r\n    );\r\n}\r\n\r\nexport default function Dashboard() {\r\n    return <DashboardContent />;\r\n}\r\n","import React from 'react';\r\nimport '../styles/error.css';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div id=\"error-container\">\r\n            <img id=\"mc-error\" src=\"https://fontmeme.com/permalink/211204/5d09fcbff63c28a89211008a437fa8c7.png\" alt=\"minecraft-evenings-font\" border=\"0\"></img>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error;\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport '../styles/login.css';\r\n\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../graphql/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}.\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function SignUp() {\r\n    const [formState, setFormState] = useState({\r\n        username: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        password: '',\r\n    });\r\n\r\n    const [addUser, { error, data }] = useMutation(ADD_USER);\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        setFormState({\r\n            ...formState,\r\n            [name]: value,\r\n        });\r\n        return true;\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { data } = await addUser({\r\n                variables: { ...formState },\r\n            });\r\n            Auth.login(data.addUser.token);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const divStyle = {\r\n        backgroundColor: 'rgb(202, 102, 122)',\r\n        borderRadius: '3px',\r\n        color: 'white',\r\n        textAlign: 'center',\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container className=\"signin-container\" component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign up\r\n                    </Typography>\r\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    name=\"firstName\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    value={formState.firstName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    value={formState.lastName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    value={formState.username}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    value={formState.password}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justifyContent=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link href=\"/login\" variant=\"body2\">\r\n                                    Already have an account? Log in\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {error && (\r\n                            <div className=\"my-3 p-1\" style={divStyle}>\r\n                                {'Try another username and/or password (password must be at least 8 characters)'}\r\n                            </div>\r\n                        )}\r\n                    </Box>\r\n                </Box>\r\n                <Copyright sx={{ mt: 5 }} />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Grid from '@mui/material/Grid';\r\nimport Link from '@mui/material/Link';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { LOGIN_USER } from '../graphql/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nimport '../styles/login.css';\r\n\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" target=\"_blank\" href=\"https://github.com/gulpinhenry/cryptocraft\">\r\n                cryptocraft\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}.\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nconst LogIn = (props) => {\r\n    const [formState, setFormState] = useState({\r\n        username: '',\r\n        password: '',\r\n    });\r\n    const [login, { error, data }] = useMutation(LOGIN_USER);\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        console.log(formState);\r\n        setFormState({\r\n            ...formState,\r\n            [name]: value,\r\n        });\r\n        return true;\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { data } = await login({\r\n                variables: { ...formState },\r\n            });\r\n            Auth.login(data.login.token);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n        setFormState({\r\n            username: '',\r\n            password: '',\r\n        });\r\n        return true;\r\n    };\r\n\r\n    const divStyle = {\r\n        backgroundColor: 'rgb(202, 102, 122)',\r\n        borderRadius: '3px',\r\n        color: 'white',\r\n        textAlign: 'center',\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container className=\"signin-container\" component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Log in\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Username\"\r\n                            name=\"username\"\r\n                            autoFocus\r\n                            value={formState.username}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={formState.password}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Log In\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link href=\"/signup\" variant=\"body2\">\r\n                                    {\"Don't have an account? Sign Up\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {error && (\r\n                            <div className=\"my-3 p-1\" style={divStyle}>\r\n                                {error.message}\r\n                            </div>\r\n                        )}\r\n                    </Box>\r\n                </Box>\r\n                <Copyright sx={{ mt: 8, mb: 4 }} />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default LogIn;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport Portfolio from './pages/Portfolio';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Error from './pages/Error';\r\nimport SignUp from './pages/Signup';\r\nimport LogIn from './pages/Login';\r\n\r\nimport { UserProvider } from './contexts/UserContext';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  const isLoggedIn = localStorage.getItem('id_token');\r\n  let redirect;\r\n\r\n  if (isLoggedIn === null && window.location.pathname !== '/signup') {\r\n    redirect = <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <UserProvider>\r\n        <Router>\r\n          <div>\r\n            {redirect}\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Dashboard} />\r\n              <Route exact path=\"/login\" component={LogIn} />\r\n              <Route exact path=\"/signup\" component={SignUp} />\r\n              {/* TODO change routing */}\r\n              <Route exact path=\"/portfolio\" component={Portfolio} />\r\n              <Route exact path=\"/me\" component={Dashboard} />\r\n              <Route component={Error} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </UserProvider>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}